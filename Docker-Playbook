---
- name: Install Docker on Ubuntu
  hosts: all
  become: yes

  tasks:
    - name: Update apt package index
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Update apt package index after adding Docker repository
      apt:
        update_cache: yes

    - name: Install Docker CE
      apt:
        name: docker-ce
        state: present

    - name: Install Docker Compose
      apt:
        name: docker-compose
        state: present

    - name: Ensure Docker is started and enabled
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add current user to Docker group (optional)
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
-------------------------------------------------------------------------------------------------------------
---
- name: install httpd
  hosts: all
  tasks:
   - name: install httpd
     yum:
      name: httpd
      state: latest
---------------------------------------------------------------------------------------------------------------

- name: Install a list of packages
  yum:
    name:
      - httpd
      - unzip
    state: present

---
- name: install httpd
  hosts: all
  tasks:
   - name: install httpd
     yum:
	  name: httpd
	  state: latest
   - name: restart web service
	 service:
	  name: httpd
	  state: restarted
-----------------------------------------------------------------------------------
---
- name: install httpd
  hosts: all
  tasks:
   - name: install httpd
     yum:
      name: httpd
      state: latest
   - name: restart web service
     service:
      name: httpd
      state: restarted
   - name: install vsftpd
     yum:
      name: vsftpd
      state: latest
   - name: restart web service
     service:
      name: vsftpd
      state: restarted
-----------------------------------------------------------------------------------
---
- name: httpd install
  hosts: node1,node2
  tasks:
   - name: httpd install
     yum:
      name: httpd
      state: latest
   - name: httpd service start
     service:
      name: httpd
      state: started
   - name: enable the service
     service:
      name: httpd
      enabled: yes
   - name: download the httpd.conf
     get_url:
      url: https://pepa.holla.cz/wp-content/uploads/2016/12/Ansible.pdf
      dest: /var/www/html/ansible.pdf
      mode: 0644
      --------------------------------------------------------------------------------

---
- name: httpd install
  hosts: node1,node2
  tasks:
   - name: httpd install
     yum:
      name: httpd
      state: latest
   - name: httpd service start
     service:
      name: httpd
      state: started
   - name: enable the service
     service:
      name: httpd
      enabled: yes
   - name: download the httpd.conf
     get_url:
      url: https://pepa.holla.cz/wp-content/uploads/2016/12/Ansible.pdf
      dest: /var/www/html/ansible.pdf
      mode: 0644
     notify:
      - restart httpd
  handlers:
   - name: restart httpd
     service:
      name: httpd
      state: restarted
---------------------------------------------------------------------------------------------------
variables:
vim hosts

node1
node2

[prod]
node1

[backup]
node2

[all:vars]
websoft=httpd
----------
---
- name: installing packages
  hosts: all
  tasks:
   - name: install {{ websoft }}
     yum:
      name: "{{ websoft }}"	
	  state: latest
   - name: start the {{ websoft }} service
     service:
	  name: "{{ websoft }}"
	  state: restarted
-----	  ---------------------------------------------------------------------------------------------------------
---
- name: Copy file with owner and permissions
  hosts: all
  tasks:
   - name: Copy file with owner and permissions
     copy:
      src: /var/tmp/foo.conf
      dest: /tmp/foo.conf
      owner: ansible
      group: ansible
      mode: '0644'

*******************************************************************************************************************
---
- name: Copy file with owner and permissions
  hosts: all
  tasks:
   - name: Copy file with owner and permission, using symbolic representation
     copy:
      src: /var/tmp/foo.conf
      dest: /tmp/foo1.conf
      owner: ansible
---------------------------------------------------------------------
To transfer a file directly to many servers:

$ ansible all -m copy -a "src=/etc/hosts dest=/tmp/hosts"

File Transfer
ansible webservers -m file -a "dest=/var/tmp/a.txt mode=600"
ansible webservers -m file -a "dest=/var/tmp/a.txt mode=600 owner=mdehaan group=mdehaan"

The file module can also create directories, similar to mkdir -p:

ansible webservers -m file -a "dest=/var/tmp/testing mode=755 owner=mdehaan group=mdehaan state=directory"


As well as delete directories (recursively) and delete files:

ansible webservers -m file -a "dest=/var/tmp/testing state=absent"

---------------------------------------------------------

Users and Groups

The ‘user’ module allows easy creation and manipulation of existing user accounts, as well as removal of user accounts that may exist:

ansible all -m user -a "name=foo password=KEnTeaStIFY"
ansible all -m user -a "name=foo state=absent"

------------------------------------------------------

Managing Services

Ensure a service is started on all webservers:

ansible webservers -m service -a "name=httpd state=started"

Alternatively, restart a service on all webservers:

ansible webservers -m service -a "name=httpd state=restarted"

Ensure a service is stopped:

ansible webservers -m service -a "name=httpd state=stopped"

------------------------------------------------------------

ansible all -m command -a uptime 
ansible all -m shell -a uptime 
ansible all -a uptime
**************************************************************************************************************************

ansible ad hoc command to check memory usage

ansible all -a "free -m"
----------------------------------------------
ad hoc command to Create a unix user group

ansible all -m group -a "name=weblogic state=present" 
**************************************************************************************************************************

ad hoc command to Create a unix user

ansible all -m user -a "name=weblogic group=weblogic createhome=yes" -b
**************************************************************************************************************************

ansible ad hoc command to Create a Directory with 755 permission 

ansible all -m file -a "path=/opt/oracle state=directory mode=0755" -b

--------------------------------------------------------------------------
ansible ad hoc command to  check free disk space of hosts

ansible all -a "df -h"
**************************************************************************************************************************

ansible all -m yum -a "name=httpd state=installed"

-----------------------------------------------------------------
ansible ad hoc command to Start or stop the service

# To Start
ansible multi -m service -a "name=httod state=started enabled=yes"
# To Stop
ansible multi -m service -a "name=httpd state=stop enabled=yes"

------------------------------------------------------------------

Managing Cron Job and Scheduling with Ansible ad hoc

#  Run the job every 15 minutes
$ ansible all -m cron -a "name='daily-cron-all-servers' minute=*/15 job='/path/to/minute-script.sh'"
# Run the job every four hours
$ ansible all -m cron -a "name='daily-cron-all-servers' hour=4 job='/path/to/hour-script.sh'"
# Enabling a Job to run at system reboot
$ ansible all -m cron -a "name='daily-cron-all-servers' special_time=reboot job='/path/to/startup-script.sh'"
# Scheduling a Daily job
$ ansible all -m cron -a "name='daily-cron-all-servers' special_time=daily job='/path/to/daily-script.sh'"
# Scheduling a Weekly job
$ ansible all -m cron -a "name='daily-cron-all-servers' special_time=weekly job='/path/to/daily-script.sh'"

-----------------------------------------------------------------------------------
ad hoc command to download file from URL

ansible all -m get_url -a "url=https://nodejs.org/dist/v14.17.4/node-v14.17.4-linux-x64.tar.xz dest=/tmp mode=0755"



